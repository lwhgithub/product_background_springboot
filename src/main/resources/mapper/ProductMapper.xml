<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 为这个mapper指定一个唯一的namespace，namespace的值习惯上设置成包名+sql映射文件名，这样就能够保证namespace的值是唯一的
	例如namespace="com.szh.mapper.personMapper"就是com.szh.mapper(包名)+personMapper(personMapper.xml文件去除后缀) -->
<!--        keyProperty="id" useGeneratedKeys="true"   添加后返回id-->
<mapper namespace="com.fh.product.product.mapper.ProductMapper">
    <select id="getProductBrandData" resultType="com.fh.product.brand.model.Brand">
        select * from product_brand where brandisdel=1;
    </select>
    <select id="getProductData" parameterType="com.fh.product.product.model.Product" resultType="com.fh.product.product.model.Product">
        select * from t_product tp
            left join product_brand pb on tp.productBrandId=pb.brandid
            left join product_category pc on tp.productTypeId=pc.id
            <include refid="sql"></include>
            order by productId desc limit #{pagingStart},#{pagingSize};
    </select>
    <select id="getProductCount" parameterType="com.fh.product.product.model.Product" resultType="long">
        select count(*) from t_product tp <include refid="sql"></include>;
    </select>
    <insert id="addProduct" parameterType="com.fh.product.product.model.Product" keyProperty="productId" useGeneratedKeys="true">
        insert into t_product (productName,productTitle,productBrandId,productTypeId,productDesc,productPrice,productStocks,productSortNum,productImgPath,productCreateDate,productUpdateDate,productAuthor,productIsDel)
                        values (#{productName},#{productTitle},#{productBrandId},#{productTypeId},#{productDesc},#{productPrice},#{productStocks},#{productSortNum},#{productImgPath},#{productCreateDate},#{productUpdateDate},#{productAuthor},#{productIsDel})
    </insert>
    <update id="updateProduct" parameterType="com.fh.product.product.model.Product">
        update t_product set
            productName=#{productName},productTitle=#{productTitle},productBrandId=#{productBrandId},
            productTypeId=#{productTypeId},productDesc=#{productDesc},productPrice=#{productPrice},
            productStocks=#{productStocks},productSortNum=#{productSortNum},productImgPath=#{productImgPath},
            productCreateDate=#{productCreateDate},productUpdateDate=#{productUpdateDate},
            productAuthor=#{productAuthor},productIsDel=#{productIsDel}
        where productId=#{productId}
    </update>

    <sql id="sql">
        <where>
            <if test="productIsDel !=''">
                and tp.productIsDel=1
            </if>
            <if test="productName!='' and productName!=null ">
                and tp.productName like concat('%',#{productName},'%')
            </if>
            <if test="productTypeId!='' and productTypeId!=null ">
                and tp.productTypeId =#{productTypeId}
            </if>
            <if test="productBrandId!='' and productBrandId!=null ">
                and tp.productBrandId =#{productBrandId}
            </if>
        </where>
    </sql>
</mapper>
